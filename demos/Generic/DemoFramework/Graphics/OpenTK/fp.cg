#version 130
 
precision highp float;

uniform vec3 light_position;
uniform vec3 eye_position;
uniform vec4 color;

in vec3 vertex_normal;
in vec3 world_position;
out vec4 out_color;

void main(void)
{
	vec3 normal = normalize(vertex_normal);
	vec3 light_direction = normalize(light_position - world_position);
	vec3 view_direction = normalize(eye_position - world_position);

	// Ambient term
	vec3 ambientColor = 0.15 * color.xyz;//vec3(1,1,1);
	vec3 ambient = ambientColor;

	// Diffuse term
	vec3 diffuse = clamp(dot(normal, light_direction), 0.0, 1.0) * color.xyz;

	// Specular term
	vec3 specular_color = vec3(1.0, 1.0, 1.0);
	float specular_intensity = clamp(dot(reflect(-light_direction, normal), view_direction), 0.0, 1.0);
	specular_intensity = pow(specular_intensity, 64);
	vec3 specular = specular_intensity * specular_color;

	out_color = vec4(ambient + diffuse + 0.2 * specular, 1.0);

	// Debugging
	//out_color = vec4(normalize(eye_position), 1);
}
